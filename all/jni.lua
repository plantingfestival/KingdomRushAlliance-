-- chunkname: @./all/jni.lua

ffi = require("ffi")

ffi.cdef("typedef uint8_t  jboolean; \ntypedef int8_t   jbyte;    \ntypedef uint16_t jchar;    \ntypedef int16_t  jshort;   \ntypedef int32_t  jint;     \ntypedef int64_t  jlong;    \ntypedef float    jfloat;   \ntypedef double   jdouble;  \n\ntypedef jint     jsize;\n\ntypedef void*           jobject;\ntypedef jobject         jclass;\ntypedef jobject         jstring;\ntypedef jobject         jarray;\ntypedef jarray          jobjectArray;\ntypedef jarray          jbooleanArray;\ntypedef jarray          jbyteArray;\ntypedef jarray          jcharArray;\ntypedef jarray          jshortArray;\ntypedef jarray          jintArray;\ntypedef jarray          jlongArray;\ntypedef jarray          jfloatArray;\ntypedef jarray          jdoubleArray;\ntypedef jobject         jthrowable;\ntypedef jobject         jweak;\n\nstruct _jfieldID;                       /* opaque structure */\ntypedef struct _jfieldID* jfieldID;     /* field IDs */\n\nstruct _jmethodID;                      /* opaque structure */\ntypedef struct _jmethodID* jmethodID;   /* method IDs */\n\nstruct JNIInvokeInterface;\n\ntypedef union jvalue {\n    jboolean    z;\n    jbyte       b;\n    jchar       c;\n    jshort      s;\n    jint        i;\n    jlong       j;\n    jfloat      f;\n    jdouble     d;\n    jobject     l;\n} jvalue;\n\ntypedef enum jobjectRefType {\n    JNIInvalidRefType = 0,\n    JNILocalRefType = 1,\n    JNIGlobalRefType = 2,\n    JNIWeakGlobalRefType = 3\n} jobjectRefType;\n\ntypedef struct {\n    const char* name;\n    const char* signature;\n    void*       fnPtr;\n} JNINativeMethod;\n\nstruct _JNIEnv;\nstruct _JavaVM;\n\ntypedef const struct JNINativeInterface* JNIEnv;\ntypedef const struct JNIInvokeInterface* JavaVM;\n\n\nstruct JNINativeInterface {\n    void*       reserved0;\n    void*       reserved1;\n    void*       reserved2;\n    void*       reserved3;\n\n    jint        (*GetVersion)(JNIEnv *);\n    jclass      (*DefineClass)(JNIEnv*, const char*, jobject, const jbyte*, jsize);\n    jclass      (*FindClass)(JNIEnv*, const char*);\n\n    jmethodID   (*FromReflectedMethod)(JNIEnv*, jobject);\n    jfieldID    (*FromReflectedField)(JNIEnv*, jobject);\n    /* spec doesn't show jboolean parameter */\n    jobject     (*ToReflectedMethod)(JNIEnv*, jclass, jmethodID, jboolean);\n\n    jclass      (*GetSuperclass)(JNIEnv*, jclass);\n    jboolean    (*IsAssignableFrom)(JNIEnv*, jclass, jclass);\n\n    /* spec doesn't show jboolean parameter */\n    jobject     (*ToReflectedField)(JNIEnv*, jclass, jfieldID, jboolean);\n\n    jint        (*Throw)(JNIEnv*, jthrowable);\n    jint        (*ThrowNew)(JNIEnv *, jclass, const char *);\n    jthrowable  (*ExceptionOccurred)(JNIEnv*);\n    void        (*ExceptionDescribe)(JNIEnv*);\n    void        (*ExceptionClear)(JNIEnv*);\n    void        (*FatalError)(JNIEnv*, const char*);\n\n    jint        (*PushLocalFrame)(JNIEnv*, jint);\n    jobject     (*PopLocalFrame)(JNIEnv*, jobject);\n\n    jobject     (*NewGlobalRef)(JNIEnv*, jobject);\n    void        (*DeleteGlobalRef)(JNIEnv*, jobject);\n    void        (*DeleteLocalRef)(JNIEnv*, jobject);\n    jboolean    (*IsSameObject)(JNIEnv*, jobject, jobject);\n\n    jobject     (*NewLocalRef)(JNIEnv*, jobject);\n    jint        (*EnsureLocalCapacity)(JNIEnv*, jint);\n\n    jobject     (*AllocObject)(JNIEnv*, jclass);\n    jobject     (*NewObject)(JNIEnv*, jclass, jmethodID, ...);\n    jobject     (*NewObjectV)(JNIEnv*, jclass, jmethodID, va_list);\n    jobject     (*NewObjectA)(JNIEnv*, jclass, jmethodID, jvalue*);\n\n    jclass      (*GetObjectClass)(JNIEnv*, jobject);\n    jboolean    (*IsInstanceOf)(JNIEnv*, jobject, jclass);\n    jmethodID   (*GetMethodID)(JNIEnv*, jclass, const char*, const char*);\n\n    jobject     (*CallObjectMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jobject     (*CallObjectMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jobject     (*CallObjectMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jboolean    (*CallBooleanMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jboolean    (*CallBooleanMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jboolean    (*CallBooleanMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jbyte       (*CallByteMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jbyte       (*CallByteMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jbyte       (*CallByteMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jchar       (*CallCharMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jchar       (*CallCharMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jchar       (*CallCharMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jshort      (*CallShortMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jshort      (*CallShortMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jshort      (*CallShortMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jint        (*CallIntMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jint        (*CallIntMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jint        (*CallIntMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jlong       (*CallLongMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jlong       (*CallLongMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jlong       (*CallLongMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jfloat      (*CallFloatMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jfloat      (*CallFloatMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jfloat      (*CallFloatMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    jdouble     (*CallDoubleMethod)(JNIEnv*, jobject, jmethodID, ...);\n    jdouble     (*CallDoubleMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    jdouble     (*CallDoubleMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n    void        (*CallVoidMethod)(JNIEnv*, jobject, jmethodID, ...);\n    void        (*CallVoidMethodV)(JNIEnv*, jobject, jmethodID, va_list);\n    void        (*CallVoidMethodA)(JNIEnv*, jobject, jmethodID, jvalue*);\n\n    jobject     (*CallNonvirtualObjectMethod)(JNIEnv*, jobject, jclass,   jmethodID, ...);\n    jobject     (*CallNonvirtualObjectMethodV)(JNIEnv*, jobject, jclass,  jmethodID, va_list);\n    jobject     (*CallNonvirtualObjectMethodA)(JNIEnv*, jobject, jclass,  jmethodID, jvalue*);\n    jboolean    (*CallNonvirtualBooleanMethod)(JNIEnv*, jobject, jclass,  jmethodID, ...);\n    jboolean    (*CallNonvirtualBooleanMethodV)(JNIEnv*, jobject, jclass, jmethodID, va_list);\n    jboolean    (*CallNonvirtualBooleanMethodA)(JNIEnv*, jobject, jclass, jmethodID, jvalue*);\n    jbyte       (*CallNonvirtualByteMethod)(JNIEnv*, jobject, jclass,     jmethodID, ...);\n    jbyte       (*CallNonvirtualByteMethodV)(JNIEnv*, jobject, jclass,    jmethodID, va_list);\n    jbyte       (*CallNonvirtualByteMethodA)(JNIEnv*, jobject, jclass,    jmethodID, jvalue*);\n    jchar       (*CallNonvirtualCharMethod)(JNIEnv*, jobject, jclass,     jmethodID, ...);\n    jchar       (*CallNonvirtualCharMethodV)(JNIEnv*, jobject, jclass,    jmethodID, va_list);\n    jchar       (*CallNonvirtualCharMethodA)(JNIEnv*, jobject, jclass,    jmethodID, jvalue*);\n    jshort      (*CallNonvirtualShortMethod)(JNIEnv*, jobject, jclass,    jmethodID, ...);\n    jshort      (*CallNonvirtualShortMethodV)(JNIEnv*, jobject, jclass,   jmethodID, va_list);\n    jshort      (*CallNonvirtualShortMethodA)(JNIEnv*, jobject, jclass,   jmethodID, jvalue*);\n    jint        (*CallNonvirtualIntMethod)(JNIEnv*, jobject, jclass,      jmethodID, ...);\n    jint        (*CallNonvirtualIntMethodV)(JNIEnv*, jobject, jclass,     jmethodID, va_list);\n    jint        (*CallNonvirtualIntMethodA)(JNIEnv*, jobject, jclass,     jmethodID, jvalue*);\n    jlong       (*CallNonvirtualLongMethod)(JNIEnv*, jobject, jclass,     jmethodID, ...);\n    jlong       (*CallNonvirtualLongMethodV)(JNIEnv*, jobject, jclass,    jmethodID, va_list);\n    jlong       (*CallNonvirtualLongMethodA)(JNIEnv*, jobject, jclass,    jmethodID, jvalue*);\n    jfloat      (*CallNonvirtualFloatMethod)(JNIEnv*, jobject, jclass,    jmethodID, ...);\n    jfloat      (*CallNonvirtualFloatMethodV)(JNIEnv*, jobject, jclass,   jmethodID, va_list);\n    jfloat      (*CallNonvirtualFloatMethodA)(JNIEnv*, jobject, jclass,   jmethodID, jvalue*);\n    jdouble     (*CallNonvirtualDoubleMethod)(JNIEnv*, jobject, jclass,   jmethodID, ...);\n    jdouble     (*CallNonvirtualDoubleMethodV)(JNIEnv*, jobject, jclass,  jmethodID, va_list);\n    jdouble     (*CallNonvirtualDoubleMethodA)(JNIEnv*, jobject, jclass,  jmethodID, jvalue*);\n    void        (*CallNonvirtualVoidMethod)(JNIEnv*, jobject, jclass,     jmethodID, ...);\n    void        (*CallNonvirtualVoidMethodV)(JNIEnv*, jobject, jclass,    jmethodID, va_list);\n    void        (*CallNonvirtualVoidMethodA)(JNIEnv*, jobject, jclass,    jmethodID, jvalue*);\n\n    jfieldID    (*GetFieldID)(JNIEnv*, jclass, const char*, const char*);\n\n    jobject     (*GetObjectField)(JNIEnv*, jobject, jfieldID);\n    jboolean    (*GetBooleanField)(JNIEnv*, jobject, jfieldID);\n    jbyte       (*GetByteField)(JNIEnv*, jobject, jfieldID);\n    jchar       (*GetCharField)(JNIEnv*, jobject, jfieldID);\n    jshort      (*GetShortField)(JNIEnv*, jobject, jfieldID);\n    jint        (*GetIntField)(JNIEnv*, jobject, jfieldID);\n    jlong       (*GetLongField)(JNIEnv*, jobject, jfieldID);\n    jfloat      (*GetFloatField)(JNIEnv*, jobject, jfieldID);\n    jdouble     (*GetDoubleField)(JNIEnv*, jobject, jfieldID);\n\n    void        (*SetObjectField)(JNIEnv*, jobject, jfieldID, jobject);\n    void        (*SetBooleanField)(JNIEnv*, jobject, jfieldID, jboolean);\n    void        (*SetByteField)(JNIEnv*, jobject, jfieldID, jbyte);\n    void        (*SetCharField)(JNIEnv*, jobject, jfieldID, jchar);\n    void        (*SetShortField)(JNIEnv*, jobject, jfieldID, jshort);\n    void        (*SetIntField)(JNIEnv*, jobject, jfieldID, jint);\n    void        (*SetLongField)(JNIEnv*, jobject, jfieldID, jlong);\n    void        (*SetFloatField)(JNIEnv*, jobject, jfieldID, jfloat);\n    void        (*SetDoubleField)(JNIEnv*, jobject, jfieldID, jdouble);\n\n    jmethodID   (*GetStaticMethodID)(JNIEnv*, jclass, const char*, const char*);\n\n    jobject     (*CallStaticObjectMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jobject     (*CallStaticObjectMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jobject     (*CallStaticObjectMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    jboolean    (*CallStaticBooleanMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jboolean    (*CallStaticBooleanMethodV)(JNIEnv*, jclass, jmethodID,\n                        va_list);\n    jboolean    (*CallStaticBooleanMethodA)(JNIEnv*, jclass, jmethodID,\n                        jvalue*);\n    jbyte       (*CallStaticByteMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jbyte       (*CallStaticByteMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jbyte       (*CallStaticByteMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    jchar       (*CallStaticCharMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jchar       (*CallStaticCharMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jchar       (*CallStaticCharMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    jshort      (*CallStaticShortMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jshort      (*CallStaticShortMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jshort      (*CallStaticShortMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    jint        (*CallStaticIntMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jint        (*CallStaticIntMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jint        (*CallStaticIntMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    jlong       (*CallStaticLongMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jlong       (*CallStaticLongMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jlong       (*CallStaticLongMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    jfloat      (*CallStaticFloatMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jfloat      (*CallStaticFloatMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jfloat      (*CallStaticFloatMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    jdouble     (*CallStaticDoubleMethod)(JNIEnv*, jclass, jmethodID, ...);\n    jdouble     (*CallStaticDoubleMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    jdouble     (*CallStaticDoubleMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n    void        (*CallStaticVoidMethod)(JNIEnv*, jclass, jmethodID, ...);\n    void        (*CallStaticVoidMethodV)(JNIEnv*, jclass, jmethodID, va_list);\n    void        (*CallStaticVoidMethodA)(JNIEnv*, jclass, jmethodID, jvalue*);\n\n    jfieldID    (*GetStaticFieldID)(JNIEnv*, jclass, const char*,\n                        const char*);\n\n    jobject     (*GetStaticObjectField)(JNIEnv*, jclass, jfieldID);\n    jboolean    (*GetStaticBooleanField)(JNIEnv*, jclass, jfieldID);\n    jbyte       (*GetStaticByteField)(JNIEnv*, jclass, jfieldID);\n    jchar       (*GetStaticCharField)(JNIEnv*, jclass, jfieldID);\n    jshort      (*GetStaticShortField)(JNIEnv*, jclass, jfieldID);\n    jint        (*GetStaticIntField)(JNIEnv*, jclass, jfieldID);\n    jlong       (*GetStaticLongField)(JNIEnv*, jclass, jfieldID);\n    jfloat      (*GetStaticFloatField)(JNIEnv*, jclass, jfieldID);\n    jdouble     (*GetStaticDoubleField)(JNIEnv*, jclass, jfieldID);\n\n    void        (*SetStaticObjectField)(JNIEnv*, jclass, jfieldID, jobject);\n    void        (*SetStaticBooleanField)(JNIEnv*, jclass, jfieldID, jboolean);\n    void        (*SetStaticByteField)(JNIEnv*, jclass, jfieldID, jbyte);\n    void        (*SetStaticCharField)(JNIEnv*, jclass, jfieldID, jchar);\n    void        (*SetStaticShortField)(JNIEnv*, jclass, jfieldID, jshort);\n    void        (*SetStaticIntField)(JNIEnv*, jclass, jfieldID, jint);\n    void        (*SetStaticLongField)(JNIEnv*, jclass, jfieldID, jlong);\n    void        (*SetStaticFloatField)(JNIEnv*, jclass, jfieldID, jfloat);\n    void        (*SetStaticDoubleField)(JNIEnv*, jclass, jfieldID, jdouble);\n\n    jstring     (*NewString)(JNIEnv*, const jchar*, jsize);\n    jsize       (*GetStringLength)(JNIEnv*, jstring);\n    const jchar* (*GetStringChars)(JNIEnv*, jstring, jboolean*);\n    void        (*ReleaseStringChars)(JNIEnv*, jstring, const jchar*);\n    jstring     (*NewStringUTF)(JNIEnv*, const char*);\n    jsize       (*GetStringUTFLength)(JNIEnv*, jstring);\n    /* JNI spec says this returns const jbyte*, but that's inconsistent */\n    const char* (*GetStringUTFChars)(JNIEnv*, jstring, jboolean*);\n    void        (*ReleaseStringUTFChars)(JNIEnv*, jstring, const char*);\n    jsize       (*GetArrayLength)(JNIEnv*, jarray);\n    jobjectArray (*NewObjectArray)(JNIEnv*, jsize, jclass, jobject);\n    jobject     (*GetObjectArrayElement)(JNIEnv*, jobjectArray, jsize);\n    void        (*SetObjectArrayElement)(JNIEnv*, jobjectArray, jsize, jobject);\n\n    jbooleanArray (*NewBooleanArray)(JNIEnv*, jsize);\n    jbyteArray    (*NewByteArray)(JNIEnv*, jsize);\n    jcharArray    (*NewCharArray)(JNIEnv*, jsize);\n    jshortArray   (*NewShortArray)(JNIEnv*, jsize);\n    jintArray     (*NewIntArray)(JNIEnv*, jsize);\n    jlongArray    (*NewLongArray)(JNIEnv*, jsize);\n    jfloatArray   (*NewFloatArray)(JNIEnv*, jsize);\n    jdoubleArray  (*NewDoubleArray)(JNIEnv*, jsize);\n\n    jboolean*   (*GetBooleanArrayElements)(JNIEnv*, jbooleanArray, jboolean*);\n    jbyte*      (*GetByteArrayElements)(JNIEnv*, jbyteArray, jboolean*);\n    jchar*      (*GetCharArrayElements)(JNIEnv*, jcharArray, jboolean*);\n    jshort*     (*GetShortArrayElements)(JNIEnv*, jshortArray, jboolean*);\n    jint*       (*GetIntArrayElements)(JNIEnv*, jintArray, jboolean*);\n    jlong*      (*GetLongArrayElements)(JNIEnv*, jlongArray, jboolean*);\n    jfloat*     (*GetFloatArrayElements)(JNIEnv*, jfloatArray, jboolean*);\n    jdouble*    (*GetDoubleArrayElements)(JNIEnv*, jdoubleArray, jboolean*);\n\n    void        (*ReleaseBooleanArrayElements)(JNIEnv*, jbooleanArray,                        jboolean*, jint);\n    void        (*ReleaseByteArrayElements)(JNIEnv*, jbyteArray,                        jbyte*, jint);\n    void        (*ReleaseCharArrayElements)(JNIEnv*, jcharArray,                        jchar*, jint);\n    void        (*ReleaseShortArrayElements)(JNIEnv*, jshortArray,                        jshort*, jint);\n    void        (*ReleaseIntArrayElements)(JNIEnv*, jintArray,                        jint*, jint);\n    void        (*ReleaseLongArrayElements)(JNIEnv*, jlongArray,                        jlong*, jint);\n    void        (*ReleaseFloatArrayElements)(JNIEnv*, jfloatArray,                        jfloat*, jint);\n    void        (*ReleaseDoubleArrayElements)(JNIEnv*, jdoubleArray,                        jdouble*, jint);\n\n    void        (*GetBooleanArrayRegion)(JNIEnv*, jbooleanArray,                        jsize, jsize, jboolean*);\n    void        (*GetByteArrayRegion)(JNIEnv*, jbyteArray,                        jsize, jsize, jbyte*);\n    void        (*GetCharArrayRegion)(JNIEnv*, jcharArray,                        jsize, jsize, jchar*);\n    void        (*GetShortArrayRegion)(JNIEnv*, jshortArray,                        jsize, jsize, jshort*);\n    void        (*GetIntArrayRegion)(JNIEnv*, jintArray,                        jsize, jsize, jint*);\n    void        (*GetLongArrayRegion)(JNIEnv*, jlongArray,                        jsize, jsize, jlong*);\n    void        (*GetFloatArrayRegion)(JNIEnv*, jfloatArray,                        jsize, jsize, jfloat*);\n    void        (*GetDoubleArrayRegion)(JNIEnv*, jdoubleArray,                        jsize, jsize, jdouble*);\n\n    /* spec shows these without const; some jni.h do, some don't */\n    void        (*SetBooleanArrayRegion)(JNIEnv*, jbooleanArray,                        jsize, jsize, const jboolean*);\n    void        (*SetByteArrayRegion)(JNIEnv*, jbyteArray,                        jsize, jsize, const jbyte*);\n    void        (*SetCharArrayRegion)(JNIEnv*, jcharArray,                        jsize, jsize, const jchar*);\n    void        (*SetShortArrayRegion)(JNIEnv*, jshortArray,                        jsize, jsize, const jshort*);\n    void        (*SetIntArrayRegion)(JNIEnv*, jintArray,                        jsize, jsize, const jint*);\n    void        (*SetLongArrayRegion)(JNIEnv*, jlongArray,                        jsize, jsize, const jlong*);\n    void        (*SetFloatArrayRegion)(JNIEnv*, jfloatArray,                        jsize, jsize, const jfloat*);\n    void        (*SetDoubleArrayRegion)(JNIEnv*, jdoubleArray,                        jsize, jsize, const jdouble*);\n\n    jint        (*RegisterNatives)(JNIEnv*, jclass, const JNINativeMethod*,                        jint);\n    jint        (*UnregisterNatives)(JNIEnv*, jclass);\n    jint        (*MonitorEnter)(JNIEnv*, jobject);\n    jint        (*MonitorExit)(JNIEnv*, jobject);\n    jint        (*GetJavaVM)(JNIEnv*, JavaVM**);\n\n    void        (*GetStringRegion)(JNIEnv*, jstring, jsize, jsize, jchar*);\n    void        (*GetStringUTFRegion)(JNIEnv*, jstring, jsize, jsize, char*);\n\n    void*       (*GetPrimitiveArrayCritical)(JNIEnv*, jarray, jboolean*);\n    void        (*ReleasePrimitiveArrayCritical)(JNIEnv*, jarray, void*, jint);\n\n    const jchar* (*GetStringCritical)(JNIEnv*, jstring, jboolean*);\n    void        (*ReleaseStringCritical)(JNIEnv*, jstring, const jchar*);\n\n    jweak       (*NewWeakGlobalRef)(JNIEnv*, jobject);\n    void        (*DeleteWeakGlobalRef)(JNIEnv*, jweak);\n\n    jboolean    (*ExceptionCheck)(JNIEnv*);\n\n    jobject     (*NewDirectByteBuffer)(JNIEnv*, void*, jlong);\n    void*       (*GetDirectBufferAddress)(JNIEnv*, jobject);\n    jlong       (*GetDirectBufferCapacity)(JNIEnv*, jobject);\n\n    /* added in JNI 1.6 */\n    jobjectRefType (*GetObjectRefType)(JNIEnv*, jobject);\n};\n\n\nstruct JNIInvokeInterface {\n    void*       reserved0;\n    void*       reserved1;\n    void*       reserved2;\n\n    jint        (*DestroyJavaVM)(JavaVM*);\n    jint        (*AttachCurrentThread)(JavaVM*, JNIEnv**, void*);\n    jint        (*DetachCurrentThread)(JavaVM*);\n    jint        (*GetEnv)(JavaVM*, void**, jint);\n    jint        (*AttachCurrentThreadAsDaemon)(JavaVM*, JNIEnv**, void*);\n};\n\nstruct JavaVMAttachArgs {\n    jint        version;    /* must be >= JNI_VERSION_1_2 */\n    const char* name;       /* NULL or name of thread as modified UTF-8 str */\n    jobject     group;      /* global ref of a ThreadGroup object, or NULL */\n};\ntypedef struct JavaVMAttachArgs JavaVMAttachArgs;\n\ntypedef struct JavaVMOption {\n    const char* optionString;\n    void*       extraInfo;\n} JavaVMOption;\n\n//typedef struct JavaVMInitArgs {\n//    jint        version;    /* use JNI_VERSION_1_2 or later */\n//\n//    jint        nOptions;\n//    JavaVMOption* options;\n//    jboolean    ignoreUnrecognized;\n//} JavaVMInitArgs;\n\n\n// ------------------------------------------------------------\n// SDL Methods\n\nJNIEnv* SDL_AndroidGetJNIEnv();\nvoid* SDL_AndroidGetActivity();\n\n")
